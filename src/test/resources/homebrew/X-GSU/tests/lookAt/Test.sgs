; SuperFX
; Summers Pittman <secondsun@gmail.com>
; 16-bit 0.16-fixed point reciprocal
; reciprocal

.include "../../common/stack.i"
.include "../../common/function.i"
.include "../../common/structs.i"
.include "../../common/var.i"
.include "libSFX.i"

;0xe000,0xa00,0xe000,0x1833,0x0,0x1800,0x0,0x100,0x0

.macro init_camera
	iwt r1, #(CAMERA + camera::eye + vector3::xPos)
	iwt r0, #$e000;-32
	stw (r1)

	iwt r1, #(CAMERA + camera::eye + vector3::yPos)
	iwt r0, #$a00;10
	stw (r1)
	
	iwt r1, #(CAMERA + camera::eye + vector3::zPos)
	iwt r0, #$e000;-32
	stw (r1)
	
	;Create lookAt
	iwt r1, #(CAMERA + camera::lookAt + vector3::xPos)
	iwt r0, #$1833  ; 24.20
	stw (r1)

	iwt r1, #(CAMERA + camera::lookAt + vector3::yPos)
	iwt r0, #$0 ; 0 
	stw (r1)
	
	iwt r1, #(CAMERA + camera::lookAt + vector3::zPos)
	iwt r0, #$1800 ; 24.0
	stw (r1)
	
	;Create up
	iwt r1, #(CAMERA + camera::up + vector3::xPos)
	iwt r0, #$000 ;0
	stw (r1)

	iwt r1, #(CAMERA + camera::up + vector3::yPos)
	iwt r0, #$0100; 1 in 8.8 twos compliment fixed point
	stw (r1)
	
	iwt r1, #(CAMERA + camera::up + vector3::zPos)
	iwt r0, #$0000 ; 0
	stw (r1)

.endmacro


.segment "GSURAM"
.res 1
INPUT:
.res 2
OUTPUT:
.res 2
.segment "GSUCODE"
GSU_Code:

;Setup stack
init_stack
init_camera

;This label represents the memory address that begins test setup
; The lua script will execute setup here
test_setup:
iwt  r0, #(CAMERA)


;This label represents the memory address that begins test execution
test_call:
	call camera_lookAt
	;LET MEMORY SETTLE
 	nop
	nop
	nop
	nop
	nop
	nop
	nop
;This label represents the memory address that ends test execution.
;The test will loop back to test_call after reaching this label.  
; The lua script will check values here and prepare for the next loop
test_stop:    
	nop
	nop
	stop
	nop


.res 1
;Code goes in code segment
.include "../../gsu_maths/gsu_sqrt.i"
.include "../../gsu_maths/gsu_vector.i"
.include "../../gsu_maths/gsu_recip.i"
.include "../../gsu_maths/gsu_camera.i"
